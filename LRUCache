class LRUCache {
    
   // 146. LRU Cache
    
    // Time compelxity of Get and put operations is  O(1)
    
    //doubly linked list 
    class Node{
        
        int key;
        int val;
        Node next;
        Node prev;
       public Node(int key,int val){
            this.key = key;
            this.val = val;
        }
    }

    private void addToHead(Node node){
        node.next = head.next;
        node.prev = head;
        head.next = node;
        node.next.prev = node;
        
    }
    
    private void removeNode(Node node){
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    
    Node head;
    Node tail;
    int capacity;
    HashMap<Integer,Node> map ;
    
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<>();
        head = new Node(-1,-1);
        tail = new Node(-1,-1);
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if(!map.containsKey(key))
            return -1;
        Node curr = map.get(key);
        removeNode(curr);
        addToHead(curr);
        return curr.val;
    }
    
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            Node curr = map.get(key);
            curr.val = value;
            removeNode(curr);
            addToHead(curr);
            
        }
        else{
            Node newNode = new Node(key,value);
            if(map.size()==capacity){
                Node prevTail = tail.prev;
                 removeNode(prevTail);
                map.remove(prevTail.key);
                
            }
               
                addToHead(newNode);
                map.put(key,newNode);
        }
        
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */